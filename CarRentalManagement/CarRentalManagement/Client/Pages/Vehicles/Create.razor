@page "/vehicles/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Vehicle</h3>
<hr />
<br />
<EditForm Model="Vehicle" OnValidSubmit="CreateVehicle">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Make: </label>
        <div>
            <InputSelect @bind-Value="Vehicle.MakeId" class="form-control">
                @*InputSelect is a blazor native component*@
                <option value="">Select Make</option>
                @if (Makes != null)
                {
                    foreach (var make in Makes)
                    {
                        <option value="@make.Id">@make.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="() => Vehicle.MakeId" />
        </div>
    </div>
    <div class="form-group">
        <label>Model: </label>
        <div>
            <InputSelect @bind-Value="Vehicle.ModelId" class="form-control">
                <option value="">Select Model</option>
                @if (Models != null)
                {
                    foreach (var model in Models)
                    {
                        <option value="@model.Id">@model.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="() => Vehicle.ModelId" />
        </div>
    </div>
    <div class="form-group">
        <label>Color: </label>
        <div>
            <InputSelect @bind-Value="Vehicle.ColourId" class="form-control">
                <option value="">Select Color</option>
                @if (Colors != null)
                {
                    foreach (var color in Colors)
                    {
                        <option value="@color.Id">@color.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="() => Vehicle.ColourId" />
        </div>
    </div>
    <div class="form-group">
        <label>Year: </label>
        <div>
            <InputNumber @bind-Value="Vehicle.Year"  class="form-control"/>
            <ValidationMessage For="() => Vehicle.Year" />
        </div>
    </div>
    <div class="form-group">
        <label>Licence Plate Number: </label>
        <div>
            <InputText @bind-Value="Vehicle.LicensePlateNumber" class="form-control" />
            <ValidationMessage For="() => Vehicle.LicensePlateNumber" />
        </div>
    </div>
    <div class="form-group">
        <label>Vehicle Identification Number: </label>
        <div>
            <InputText @bind-Value="Vehicle.Vin"  class="form-control"/>
            <ValidationMessage For="() => Vehicle.Vin" />
        </div>
    </div>
    <div class="form-group">
        <label>Daily Rate: </label>
        <div>
            <InputNumber @bind-Value="Vehicle.RentalRate" class="form-control" />
            <ValidationMessage For="() => Vehicle.RentalRate" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">Create Vehicle</button>
</EditForm>


@code {
    Vehicle Vehicle = new Vehicle();
    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colors;

    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.Makes}");
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.Models}");
        Colors = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.Colours}");
    }

    private async Task CreateVehicle()
    {
        await _client.PostAsJsonAsync(Endpoints.Vehicles, Vehicle);
        _navManager.NavigateTo("/vehicles/");
    }

}
